// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package seatsaverv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeatSaverServiceClient is the client API for SeatSaverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeatSaverServiceClient interface {
	GetVenues(ctx context.Context, in *GetVenuesRequest, opts ...grpc.CallOption) (SeatSaverService_GetVenuesClient, error)
	GetVenue(ctx context.Context, in *GetVenueRequest, opts ...grpc.CallOption) (*GetVenueResponse, error)
	GetOpenSeats(ctx context.Context, in *GetOpenSeatsRequest, opts ...grpc.CallOption) (SeatSaverService_GetOpenSeatsClient, error)
	GetSoldSeats(ctx context.Context, in *GetSoldSeatsRequest, opts ...grpc.CallOption) (SeatSaverService_GetSoldSeatsClient, error)
	GetReservedSeats(ctx context.Context, in *GetReservedSeatsRequest, opts ...grpc.CallOption) (SeatSaverService_GetReservedSeatsClient, error)
	GetSeats(ctx context.Context, in *GetSeatsRequest, opts ...grpc.CallOption) (SeatSaverService_GetSeatsClient, error)
	ReserveSeat(ctx context.Context, in *ReserveSeatRequest, opts ...grpc.CallOption) (*ReserveSeatResponse, error)
	ReleaseSeat(ctx context.Context, in *ReleaseSeatRequest, opts ...grpc.CallOption) (*ReleaseSeatResponse, error)
	BuySeat(ctx context.Context, in *BuySeatRequest, opts ...grpc.CallOption) (*BuySeatResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PingStream(ctx context.Context, in *PingStreamRequest, opts ...grpc.CallOption) (SeatSaverService_PingStreamClient, error)
}

type seatSaverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSeatSaverServiceClient(cc grpc.ClientConnInterface) SeatSaverServiceClient {
	return &seatSaverServiceClient{cc}
}

func (c *seatSaverServiceClient) GetVenues(ctx context.Context, in *GetVenuesRequest, opts ...grpc.CallOption) (SeatSaverService_GetVenuesClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeatSaverService_ServiceDesc.Streams[0], "/seatsaver.v1.SeatSaverService/GetVenues", opts...)
	if err != nil {
		return nil, err
	}
	x := &seatSaverServiceGetVenuesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeatSaverService_GetVenuesClient interface {
	Recv() (*GetVenuesResponse, error)
	grpc.ClientStream
}

type seatSaverServiceGetVenuesClient struct {
	grpc.ClientStream
}

func (x *seatSaverServiceGetVenuesClient) Recv() (*GetVenuesResponse, error) {
	m := new(GetVenuesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *seatSaverServiceClient) GetVenue(ctx context.Context, in *GetVenueRequest, opts ...grpc.CallOption) (*GetVenueResponse, error) {
	out := new(GetVenueResponse)
	err := c.cc.Invoke(ctx, "/seatsaver.v1.SeatSaverService/GetVenue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatSaverServiceClient) GetOpenSeats(ctx context.Context, in *GetOpenSeatsRequest, opts ...grpc.CallOption) (SeatSaverService_GetOpenSeatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeatSaverService_ServiceDesc.Streams[1], "/seatsaver.v1.SeatSaverService/GetOpenSeats", opts...)
	if err != nil {
		return nil, err
	}
	x := &seatSaverServiceGetOpenSeatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeatSaverService_GetOpenSeatsClient interface {
	Recv() (*GetOpenSeatsResponse, error)
	grpc.ClientStream
}

type seatSaverServiceGetOpenSeatsClient struct {
	grpc.ClientStream
}

func (x *seatSaverServiceGetOpenSeatsClient) Recv() (*GetOpenSeatsResponse, error) {
	m := new(GetOpenSeatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *seatSaverServiceClient) GetSoldSeats(ctx context.Context, in *GetSoldSeatsRequest, opts ...grpc.CallOption) (SeatSaverService_GetSoldSeatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeatSaverService_ServiceDesc.Streams[2], "/seatsaver.v1.SeatSaverService/GetSoldSeats", opts...)
	if err != nil {
		return nil, err
	}
	x := &seatSaverServiceGetSoldSeatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeatSaverService_GetSoldSeatsClient interface {
	Recv() (*GetSoldSeatsResponse, error)
	grpc.ClientStream
}

type seatSaverServiceGetSoldSeatsClient struct {
	grpc.ClientStream
}

func (x *seatSaverServiceGetSoldSeatsClient) Recv() (*GetSoldSeatsResponse, error) {
	m := new(GetSoldSeatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *seatSaverServiceClient) GetReservedSeats(ctx context.Context, in *GetReservedSeatsRequest, opts ...grpc.CallOption) (SeatSaverService_GetReservedSeatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeatSaverService_ServiceDesc.Streams[3], "/seatsaver.v1.SeatSaverService/GetReservedSeats", opts...)
	if err != nil {
		return nil, err
	}
	x := &seatSaverServiceGetReservedSeatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeatSaverService_GetReservedSeatsClient interface {
	Recv() (*GetReservedSeatsResponse, error)
	grpc.ClientStream
}

type seatSaverServiceGetReservedSeatsClient struct {
	grpc.ClientStream
}

func (x *seatSaverServiceGetReservedSeatsClient) Recv() (*GetReservedSeatsResponse, error) {
	m := new(GetReservedSeatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *seatSaverServiceClient) GetSeats(ctx context.Context, in *GetSeatsRequest, opts ...grpc.CallOption) (SeatSaverService_GetSeatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeatSaverService_ServiceDesc.Streams[4], "/seatsaver.v1.SeatSaverService/GetSeats", opts...)
	if err != nil {
		return nil, err
	}
	x := &seatSaverServiceGetSeatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeatSaverService_GetSeatsClient interface {
	Recv() (*GetSeatsResponse, error)
	grpc.ClientStream
}

type seatSaverServiceGetSeatsClient struct {
	grpc.ClientStream
}

func (x *seatSaverServiceGetSeatsClient) Recv() (*GetSeatsResponse, error) {
	m := new(GetSeatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *seatSaverServiceClient) ReserveSeat(ctx context.Context, in *ReserveSeatRequest, opts ...grpc.CallOption) (*ReserveSeatResponse, error) {
	out := new(ReserveSeatResponse)
	err := c.cc.Invoke(ctx, "/seatsaver.v1.SeatSaverService/ReserveSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatSaverServiceClient) ReleaseSeat(ctx context.Context, in *ReleaseSeatRequest, opts ...grpc.CallOption) (*ReleaseSeatResponse, error) {
	out := new(ReleaseSeatResponse)
	err := c.cc.Invoke(ctx, "/seatsaver.v1.SeatSaverService/ReleaseSeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatSaverServiceClient) BuySeat(ctx context.Context, in *BuySeatRequest, opts ...grpc.CallOption) (*BuySeatResponse, error) {
	out := new(BuySeatResponse)
	err := c.cc.Invoke(ctx, "/seatsaver.v1.SeatSaverService/BuySeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatSaverServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/seatsaver.v1.SeatSaverService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *seatSaverServiceClient) PingStream(ctx context.Context, in *PingStreamRequest, opts ...grpc.CallOption) (SeatSaverService_PingStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeatSaverService_ServiceDesc.Streams[5], "/seatsaver.v1.SeatSaverService/PingStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &seatSaverServicePingStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SeatSaverService_PingStreamClient interface {
	Recv() (*PingStreamResponse, error)
	grpc.ClientStream
}

type seatSaverServicePingStreamClient struct {
	grpc.ClientStream
}

func (x *seatSaverServicePingStreamClient) Recv() (*PingStreamResponse, error) {
	m := new(PingStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeatSaverServiceServer is the server API for SeatSaverService service.
// All implementations should embed UnimplementedSeatSaverServiceServer
// for forward compatibility
type SeatSaverServiceServer interface {
	GetVenues(*GetVenuesRequest, SeatSaverService_GetVenuesServer) error
	GetVenue(context.Context, *GetVenueRequest) (*GetVenueResponse, error)
	GetOpenSeats(*GetOpenSeatsRequest, SeatSaverService_GetOpenSeatsServer) error
	GetSoldSeats(*GetSoldSeatsRequest, SeatSaverService_GetSoldSeatsServer) error
	GetReservedSeats(*GetReservedSeatsRequest, SeatSaverService_GetReservedSeatsServer) error
	GetSeats(*GetSeatsRequest, SeatSaverService_GetSeatsServer) error
	ReserveSeat(context.Context, *ReserveSeatRequest) (*ReserveSeatResponse, error)
	ReleaseSeat(context.Context, *ReleaseSeatRequest) (*ReleaseSeatResponse, error)
	BuySeat(context.Context, *BuySeatRequest) (*BuySeatResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	PingStream(*PingStreamRequest, SeatSaverService_PingStreamServer) error
}

// UnimplementedSeatSaverServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSeatSaverServiceServer struct {
}

func (UnimplementedSeatSaverServiceServer) GetVenues(*GetVenuesRequest, SeatSaverService_GetVenuesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVenues not implemented")
}
func (UnimplementedSeatSaverServiceServer) GetVenue(context.Context, *GetVenueRequest) (*GetVenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVenue not implemented")
}
func (UnimplementedSeatSaverServiceServer) GetOpenSeats(*GetOpenSeatsRequest, SeatSaverService_GetOpenSeatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetOpenSeats not implemented")
}
func (UnimplementedSeatSaverServiceServer) GetSoldSeats(*GetSoldSeatsRequest, SeatSaverService_GetSoldSeatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSoldSeats not implemented")
}
func (UnimplementedSeatSaverServiceServer) GetReservedSeats(*GetReservedSeatsRequest, SeatSaverService_GetReservedSeatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReservedSeats not implemented")
}
func (UnimplementedSeatSaverServiceServer) GetSeats(*GetSeatsRequest, SeatSaverService_GetSeatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSeats not implemented")
}
func (UnimplementedSeatSaverServiceServer) ReserveSeat(context.Context, *ReserveSeatRequest) (*ReserveSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveSeat not implemented")
}
func (UnimplementedSeatSaverServiceServer) ReleaseSeat(context.Context, *ReleaseSeatRequest) (*ReleaseSeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSeat not implemented")
}
func (UnimplementedSeatSaverServiceServer) BuySeat(context.Context, *BuySeatRequest) (*BuySeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuySeat not implemented")
}
func (UnimplementedSeatSaverServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSeatSaverServiceServer) PingStream(*PingStreamRequest, SeatSaverService_PingStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PingStream not implemented")
}

// UnsafeSeatSaverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeatSaverServiceServer will
// result in compilation errors.
type UnsafeSeatSaverServiceServer interface {
	mustEmbedUnimplementedSeatSaverServiceServer()
}

func RegisterSeatSaverServiceServer(s grpc.ServiceRegistrar, srv SeatSaverServiceServer) {
	s.RegisterService(&SeatSaverService_ServiceDesc, srv)
}

func _SeatSaverService_GetVenues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetVenuesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeatSaverServiceServer).GetVenues(m, &seatSaverServiceGetVenuesServer{stream})
}

type SeatSaverService_GetVenuesServer interface {
	Send(*GetVenuesResponse) error
	grpc.ServerStream
}

type seatSaverServiceGetVenuesServer struct {
	grpc.ServerStream
}

func (x *seatSaverServiceGetVenuesServer) Send(m *GetVenuesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SeatSaverService_GetVenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatSaverServiceServer).GetVenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seatsaver.v1.SeatSaverService/GetVenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatSaverServiceServer).GetVenue(ctx, req.(*GetVenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatSaverService_GetOpenSeats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOpenSeatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeatSaverServiceServer).GetOpenSeats(m, &seatSaverServiceGetOpenSeatsServer{stream})
}

type SeatSaverService_GetOpenSeatsServer interface {
	Send(*GetOpenSeatsResponse) error
	grpc.ServerStream
}

type seatSaverServiceGetOpenSeatsServer struct {
	grpc.ServerStream
}

func (x *seatSaverServiceGetOpenSeatsServer) Send(m *GetOpenSeatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SeatSaverService_GetSoldSeats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSoldSeatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeatSaverServiceServer).GetSoldSeats(m, &seatSaverServiceGetSoldSeatsServer{stream})
}

type SeatSaverService_GetSoldSeatsServer interface {
	Send(*GetSoldSeatsResponse) error
	grpc.ServerStream
}

type seatSaverServiceGetSoldSeatsServer struct {
	grpc.ServerStream
}

func (x *seatSaverServiceGetSoldSeatsServer) Send(m *GetSoldSeatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SeatSaverService_GetReservedSeats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetReservedSeatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeatSaverServiceServer).GetReservedSeats(m, &seatSaverServiceGetReservedSeatsServer{stream})
}

type SeatSaverService_GetReservedSeatsServer interface {
	Send(*GetReservedSeatsResponse) error
	grpc.ServerStream
}

type seatSaverServiceGetReservedSeatsServer struct {
	grpc.ServerStream
}

func (x *seatSaverServiceGetReservedSeatsServer) Send(m *GetReservedSeatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SeatSaverService_GetSeats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetSeatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeatSaverServiceServer).GetSeats(m, &seatSaverServiceGetSeatsServer{stream})
}

type SeatSaverService_GetSeatsServer interface {
	Send(*GetSeatsResponse) error
	grpc.ServerStream
}

type seatSaverServiceGetSeatsServer struct {
	grpc.ServerStream
}

func (x *seatSaverServiceGetSeatsServer) Send(m *GetSeatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SeatSaverService_ReserveSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatSaverServiceServer).ReserveSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seatsaver.v1.SeatSaverService/ReserveSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatSaverServiceServer).ReserveSeat(ctx, req.(*ReserveSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatSaverService_ReleaseSeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatSaverServiceServer).ReleaseSeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seatsaver.v1.SeatSaverService/ReleaseSeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatSaverServiceServer).ReleaseSeat(ctx, req.(*ReleaseSeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatSaverService_BuySeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuySeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatSaverServiceServer).BuySeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seatsaver.v1.SeatSaverService/BuySeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatSaverServiceServer).BuySeat(ctx, req.(*BuySeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatSaverService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeatSaverServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/seatsaver.v1.SeatSaverService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeatSaverServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SeatSaverService_PingStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SeatSaverServiceServer).PingStream(m, &seatSaverServicePingStreamServer{stream})
}

type SeatSaverService_PingStreamServer interface {
	Send(*PingStreamResponse) error
	grpc.ServerStream
}

type seatSaverServicePingStreamServer struct {
	grpc.ServerStream
}

func (x *seatSaverServicePingStreamServer) Send(m *PingStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SeatSaverService_ServiceDesc is the grpc.ServiceDesc for SeatSaverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeatSaverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seatsaver.v1.SeatSaverService",
	HandlerType: (*SeatSaverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVenue",
			Handler:    _SeatSaverService_GetVenue_Handler,
		},
		{
			MethodName: "ReserveSeat",
			Handler:    _SeatSaverService_ReserveSeat_Handler,
		},
		{
			MethodName: "ReleaseSeat",
			Handler:    _SeatSaverService_ReleaseSeat_Handler,
		},
		{
			MethodName: "BuySeat",
			Handler:    _SeatSaverService_BuySeat_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SeatSaverService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVenues",
			Handler:       _SeatSaverService_GetVenues_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetOpenSeats",
			Handler:       _SeatSaverService_GetOpenSeats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSoldSeats",
			Handler:       _SeatSaverService_GetSoldSeats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetReservedSeats",
			Handler:       _SeatSaverService_GetReservedSeats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSeats",
			Handler:       _SeatSaverService_GetSeats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingStream",
			Handler:       _SeatSaverService_PingStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/seatsaver.proto",
}
